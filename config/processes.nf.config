def get_partition = { !(partition instanceof Closure) ? { t -> partition } : partition }()
def cacheDir = { (params.cache_dir) ?
        { f ->
            def d = new File("$params.cache_dir/$f")
            d.mkdirs()
            "$params.cache_dir/$f"
        } :
        { f -> "" }
}

process {

    // Label specifications
    withLabel: freesurfer{ container = "${freesurfer}" }
    withLabel: rtms{ container ="${rtms}" }
    withLabel: gmsh4{ container ="${rtms}" }
    withLabel: ciftify { container = "${ciftify}" }
    withLabel: connectome{
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        container = "${connectome}"
        beforeScript = "export SINGULARITYENV_OMP_NUM_THREADS=1"
    }

    // CIFTI MESHING
    withName: fmriprep_anat {
        executor = "${engine}"
        time = "12:00:00"
        cpus = 4
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("fmriprep_anat")
    }

    withName: ciftify{
        executor = "${engine}"
        time = "24:00:00"
        cpus = 4
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("ciftify")
    }

    withName: mri2mesh{
        executor = "${engine}"
        time = "24:00:00"
        cpus = 4
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        containerOptions = "-B ${params.license}:/license"
        container = "${simnibs}"
        storeDir = cacheDir("mri2mesh")
    }

    withName: mri2mesh_brain{
        executor = "${engine}"
        time = "24:00:00"
        cpus = 4
        container = "${simnibs}"
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        containerOptions = "-B ${params.license}:/license"
        storeDir = cacheDir("mri2mesh_brain")
    }

    withName: update_msh{
        executor = "${engine}"
        time = "5:00:00"
        cpus = 4
        maxForks = 10
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("update_msh")
    }

    // REGISTRATION
    withName: msm_sulc{
        errorStrategy = {task.attempt == 3 ? "finish": "retry"}
        containerOptions = "-B ${atlas}:/atlas -B ${msm}:/msm_conf"
        executor= "${engine}"
        time = "3:00:00"
        cpus = num_cpus
        storeDir = cacheDir("msm_sulc")
    }

    // WEIGHTFUNC
    withName: smooth{
        executor = "${engine}"
        time = "1:00:00"
        cpus = num_cpus
        storeDir = cacheDir("cifti_smooth")
    }

    withName: calculate_roi_correlation{
        storeDir = cacheDir("calculate_roi_correlation")
    }

    withName: project2vol{
        executor = "${engine}"
        time = "10:00"
        cpus = 8
    }

    // PROJECTION AND OPTIMIZATION
    withName: tetrahedral_projection{
        executor = "${engine}"
        time = "5:00:00"
        cpus = num_cpus
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("tetrahedral_projection")
    }

    withName: optimize_coil{
        executor = "${engine}"
        time = "12:00:00"
        cpus = num_cpus
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
    }
}
