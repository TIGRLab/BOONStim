executor = 'local'
params.bin = "${scc_base}/${bin}"
params.coil = "${scc_base}/${coil}"
params.simg = "${scc_base}/${simg}"
params.ciftify_img = "${scc_base}/${ciftify_img}"
params.ciftify_invocation = "${scc_base}/${ciftify_invocation}"
params.ciftify_descriptor = "${scc_base}/${ciftify_descriptor}"
params.fmriprep_img = "${scc_base}/${fmriprep_img}"
params.anat_invocation = "${scc_base}/${anat_invocation}"
params.anat_descriptor = "${scc_base}/${anat_descriptor}"
params.license = "/KIMEL/tigrlab/quarantine/freesurfer/6.0.0/build"
//params.license = "${scc_base}/${license}"
params.freesurfer = "${scc_base}/${freesurfer}"
params.connectome = "${scc_base}/${connectome}"
params.atlas = "${scc_base}/${atlas}"
params.msm = "${scc_base}/${msm}"
params.weightworkflow = "${scc_base}/${weightworkflow}"
params.work = "/tmp/"
params.cpus = num_cpus

includeConfig "${scc_base}/${weightworkflow_config}"

process {

    // CIFTI MESHING
    withName: fmriprep_anat {
        executor = 'slurm'
        time = "12:00:00"
        cpus = 4
        queue = 'medium'
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = "${scc_base}/${cacheDir}/fmriprep_anat"
    }

    withName: ciftify{
        executor = 'slurm'
        time = "24:00:00"
        cpus = 4
        queue = 'medium'
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = "${scc_base}/${cacheDir}/ciftify"
    }

    withName: mri2mesh{
        executor = 'slurm'
        time = "24:00:00"
        cpus = 4
        queue = 'medium'
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        containerOptions = "-B ${params.license}:/license"
        container = "${scc_base}/${simnibs3_img}"
        storeDir = "${scc_base}/${cacheDir}/mri2mesh"
    }

    withName: mri2mesh_brain{
        executor = 'slurm'
        time = "24:00:00"
        cpus = 4
        queue = 'medium'
        container = "${scc_base}/${simnibs3_img}"
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        containerOptions = "-B ${params.license}:/license"
        storeDir = "${scc_base}/${cacheDir}/mri2mesh_brain"
    }

    withName: update_msh{
        executor = 'slurm'
        time = "5:00:00"
        cpus = 4
        queue = 'medium'
        maxForks = 10
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = "${scc_base}/${cacheDir}/update_msh"
    }

    withLabel: connectome{
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        container = "${scc_base}/${connectome_img}"
        beforeScript = "export SINGULARITYENV_OMP_NUM_THREADS=1"
        containerOptions = "-B ${params.atlas}:/atlas -B ${params.msm}:/msm_conf -H ${scc_base}/${cacheDir}"
    }


    // REGISTRATION
    withName: msm_sulc{
        errorStrategy = {task.attempt == 3 ? "finish": "retry"}
        //containerOptions = "-B ${params.atlas}:/atlas -B ${params.msm}:/msm_conf"
        executor= 'slurm'
        time = "3:00:00"
        cpus = num_cpus
        queue = 'short'
        storeDir = "${scc_base}/${cacheDir}/msm_sulc"
    }


    // WEIGHTFUNC
    withName: smooth_img{
        executor = 'slurm'
        time = "1:00:00"
        cpus = num_cpus
        queue = 'short'
        storeDir = "${scc_base}/${cacheDir}/cifti_smooth"
    }

    withName: calculate_roi_correlation{
        storeDir = "${scc_base}/${cacheDir}/calculate_roi_correlation"
    }

    withName: project_mask2surf{
        maxForks = 2
        storeDir = "${scc_base}/${cacheDir}/project_mask2surf"
    }

    withName: project_left_mask2surf{ maxForks = 1 }
    withName: project_right_mask2surf{ maxForks = 1 }

    withName: project2vol{
        maxForks = 2
    }

    withName: recombine_weightfunc{
        storeDir = "${scc_base}/${cacheDir}/recombine_weightfunc"
    }


    withName: clean_img{
        storeDir = "${scc_base}/${cacheDir}/clean_img"
        containerOptions = "-B ${params.atlas}:/atlas -B ${params.msm}:/msm_conf -H ${scc_base}/${cacheDir}"
    }

    withName: centroid_mask { storeDir = "${scc_base}/${cacheDir}/centroid_mask" }
    withName: dilate_dmpfc_mask{ storeDir = "${scc_base}/${cacheDir}/dilate_dmpfc_mask" }
    withName: weightfunc_mask { storeDir = "${scc_base}/${cacheDir}/weightfunc_mask" }
    withName: make_symmetric_dscalar { storeDir = "${scc_base}/${cacheDir}/make_symmetric_dscalar" }


    // SURF PARAMETERIZATION
    withName: extract_surf_patch{
        storeDir = "${scc_base}/${cacheDir}/extract_surf_patch"
    }

    withName: parameterize_surf{
        storeDir = "${scc_base}/${cacheDir}/parameterize_surf"
    }

    withName: qc_parameterization{
        storeDir = "${scc_base}/${cacheDir}/qc_parameterization"
    }


    // PROJECTION AND OPTIMIZATION
    withName: tetrahedral_projection{
        executor = 'slurm'
        time = "5:00:00"
        cpus = num_cpus
        queue = 'short'
        storeDir = "${scc_base}/${cacheDir}/tetrahedral_projection"
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
    }

    withName: tet_project2vol{
        maxForks = 2
        storeDir = "${scc_base}/${cacheDir}/tet_project2vol"
    }
    withName: centroid_project2vol{
        maxForks = 2
        storeDir = "${scc_base}/${cacheDir}/centroid_project2vol"
    }
    withName: add_tet_niftis{ storeDir = "${scc_base}/${cacheDir}/add_tet_niftis" }
    withName: optimize_coil{
        executor = 'local'
        time = "12:00:00"
        cpus = num_cpus
        queue = 'high-moby'
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        //scratch = "${params.work}"
    }

    withName: construct_outputs{
        storeDir = "${scc_base}/${cacheDir}/construct_outputs"
    }

    withLabel: freesurfer{ container = "${scc_base}/${freesurfer_img}" }
    withLabel: rtms{ container ="${scc_base}/${rtms_img}" }
    withLabel: gmsh4{ container ="${scc_base}/${rtms_img}" }
    withLabel: ciftify { container = "${scc_base}/${ciftify_img}" }
}
