params.bin = "${bin}"
params.coil = "${coil}"
params.simg = "${simg}"
params.ciftify_img = "${ciftify_img}"
params.ciftify_invocation = "${ciftify_invocation}"
params.ciftify_descriptor = "${ciftify_descriptor}"
params.fmriprep_img = "${fmriprep_img}"
params.anat_invocation = "${anat_invocation}"
params.anat_descriptor = "${anat_descriptor}"
params.license = "${license}"
params.freesurfer = "${freesurfer}"
params.connectome = "${connectome}"
params.atlas = "${atlas}"
params.msm = "${msm}"
params.weightworkflow = "${weightworkflow}"
params.work = "/tmp/"
params.cpus = num_cpus
includeConfig "${weightworkflow_config}"

process {

    // CIFTI MESHING
    withName: fmriprep_anat {
        executor = 'slurm'
        time = "12:00:00"
        cpus = 4
        queue = 'high-moby'
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        //scratch = "${params.work}"
        storeDir = "${cacheDir}/fmriprep_anat"
    }

    withName: ciftify{
        executor = 'slurm'
        time = "24:00:00"
        cpus = 4
        queue = 'high-moby'
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        //scratch = "${params.work}"
        storeDir = "${cacheDir}/ciftify"
    }

    withName: mri2mesh{
        executor = 'slurm'
        time = "24:00:00"
        cpus = 4
        queue = 'high-moby'
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        containerOptions = "-B ${params.license}:/license"
        container = "${simnibs3_img}"
        //scratch = "${params.work}"
        storeDir = "${cacheDir}/mri2mesh"
    }

    withName: mri2mesh_brain{
        executor = 'slurm'
        time = "24:00:00"
        cpus = 4
        queue = 'high-moby'
        container = "${simnibs3_img}"
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        containerOptions = "-B ${params.license}:/license"
        //scratch = "${params.work}"
        storeDir = "${cacheDir}/mri2mesh_brain"
    }

    withName: update_msh{
        executor = 'slurm'
        time = "5:00:00"
        cpus = 4
        queue = 'high-moby'
        maxForks = 10
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = "${cacheDir}/update_msh"
    }

    withLabel: connectome{
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        container = "${connectome_img}"
        beforeScript = "export SINGULARITYENV_OMP_NUM_THREADS=1"
    }


    // REGISTRATION
    withName: msm_sulc{
        errorStrategy = {task.attempt == 3 ? "finish": "retry"}
        containerOptions = "-B ${params.atlas}:/atlas -B ${params.msm}:/msm_conf"
        executor= 'slurm'
        time = "3:00:00"
        cpus = num_cpus
        queue = 'high-moby'
        storeDir = "${cacheDir}/msm_sulc"
    }

    // WEIGHTFUNC
    withName: smooth_img{
        executor = 'slurm'
        time = "1:00:00"
        cpus = num_cpus
        queue = 'high-moby'
        storeDir = "${cacheDir}/cifti_smooth"
    }

    withName: calculate_roi_correlation{
        storeDir = "${cacheDir}/calculate_roi_correlation"
    }

    withName: project_mask2surf{
        maxForks = 8
        storeDir = "${cacheDir}/project_mask2surf"
    }

    withName: project2vol{
        maxForks = 8
    }

    withName: recombine_weightfunc{
        storeDir = "${cacheDir}/recombine_weightfunc"
    }

    withName: apply_mask{
        storeDir = "${cacheDir}/apply_mask"
    }

    withName: threshold_weightfunc{
        storeDir = "${cacheDir}/threshold_weightfunc"
    }

    withName: clean_img{ storeDir = "${cacheDir}/clean_img" }
    withName: centroid_mask { storeDir = "${cacheDir}/centroid_mask" }
    withName: weightfunc_mask { storeDir = "${cacheDir}/weightfunc_mask" }
    withName: make_symmetric_dscalar { storeDir = "${cacheDir}/make_symmetric_dscalar" }

    // SURF PARAMETERIZATION
    withName: extract_surf_patch{
        storeDir = "${cacheDir}/extract_surf_patch"
    }

    withName: parameterize_surf{
        storeDir = "${cacheDir}/parameterize_surf"
    }

    withName: qc_parameterization{
        storeDir = "${cacheDir}/qc_parameterization"
    }


    // PROJECTION AND OPTIMIZATION
    withName: tetrahedral_projection{
        executor = 'slurm'
        time = "5:00:00"
        cpus = num_cpus
        queue = 'high-moby'
        storeDir = "${cacheDir}/tetrahedral_projection"
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
    }

    withName: tet_project2vol{ storeDir = "${cacheDir}/tet_project2vol" }
    withName: add_tet_niftis{ storeDir = "${cacheDir}/add_tet_niftis" }

    withName: optimize_coil{
        executor = 'local'
        time = "12:00:00"
        cpus = num_cpus
        queue = 'high-moby'
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        //scratch = "${params.work}"
    }

    withName: construct_outputs{
        storeDir = "${cacheDir}/construct_outputs"
    }



    withLabel: freesurfer{ container = "${freesurfer_img}" }
    withLabel: rtms{ container ="${rtms_img}" }
    withLabel: gmsh4{ container ="${rtms_img}" }
    withLabel: ciftify { container = "${ciftify_img}" }
}
